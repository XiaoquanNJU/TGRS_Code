// Study area location
var position = ee.Geometry.Point([115.93055119367318, 43.97649538354993]);

// Set a 10km buffer
var Buffer = position.buffer(10000); 

// Study area extent 
var StudyArea = Buffer;

// Visualize the study area
Map.centerObject(StudyArea, 10);
Map.addLayer(StudyArea, {color: 'blue'}, 'Study Area');

//-------------------------------------------------------------------------------
// Direct use of Landsat 8 SR imagery

// Landsat 8 reflectance value transformation
function applyScaleFactorsL8SR(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// Rename Landsat 8 SR bands
function bandRenameL8SR(image) {
  var coastal_aerosol = image.select(['SR_B1']).rename('coastal_aerosol');
  var blue = image.select(['SR_B2']).rename('blue');
  var green = image.select(['SR_B3']).rename('green');
  var red = image.select(['SR_B4']).rename('red');
  var nir = image.select(['SR_B5']).rename('nir');
  var swir1 = image.select(['SR_B6']).rename('swir1');
  var swir2 = image.select(['SR_B7']).rename('swir2');
  var new_image = blue.addBands([green, red, nir, swir1, swir2]);
  return new_image;
}

// Select Landsat 8 SR dataset and set parameters
var start_time = '2021-6-10'; // Start date of the imagery
var end_time = '2021-6-11';  // End date of the imagery
var cloudCover = 20; // Cloud cover threshold

var L8SR_dataset = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") // Landsat 8 SR dataset
    .filterDate(start_time, end_time)  // Image date filter
    .filterBounds(StudyArea)  // Image region filter
    .filter(ee.Filter.lt('CLOUD_COVER', cloudCover)) // Cloud cover filter
    .map(applyScaleFactorsL8SR) // Apply reflectance scaling
    .map(bandRenameL8SR); // Rename bands

print(L8SR_dataset);

// Clip the image by study area
var L8SR = L8SR_dataset.median().clip(StudyArea);

// Visualize Landsat 8 reflectance true color image
Map.addLayer(L8SR, {min: 0.0, max: 0.35, bands: ['red', 'green', 'blue']}, 'L8SR_TrueColor');

//-------------------------------------------------------------
// Use SIAC for atmospheric correction on Landsat 8 TOA data

// SIAC atmospheric correction algorithm
var siac = require('users/marcyinfeng/utils:SIAC');

// Rename Landsat 8 TOA bands
function bandRenameL8TOA(image) {
  var coastal_aerosol = image.select(['B1']).rename('coastal_aerosol');
  var blue = image.select(['B2']).rename('blue');
  var green = image.select(['B3']).rename('green');
  var red = image.select(['B4']).rename('red');
  var nir = image.select(['B5']).rename('nir');
  var swir1 = image.select(['B6']).rename('swir1');
  var swir2 = image.select(['B7']).rename('swir2');
  var new_image = blue.addBands([green, red, nir, swir1, swir2]);
  return new_image;
}

// Select Landsat 8 TOA dataset and set parameters
var L8SIAC_dataset = ee.ImageCollection("LANDSAT/LC08/C02/T1_TOA") // Landsat 8 TOA dataset
    .filterDate(start_time, end_time)  // Image date filter
    .filterBounds(StudyArea)  // Image region filter
    .filter(ee.Filter.lt('CLOUD_COVER', cloudCover)) // Cloud cover filter
    .map(siac.get_l8_sur) // Apply SIAC atmospheric correction
    .map(bandRenameL8TOA); // Rename bands

print(L8SIAC_dataset);

// Clip the image by study area
var L8SIAC = L8SIAC_dataset.median().clip(StudyArea);

// Visualize Landsat 8 SIAC true color image
Map.addLayer(L8SIAC, {min: 0.0, max: 0.35, bands: ['red', 'green', 'blue']}, 'L8SIAC_TrueColor');
